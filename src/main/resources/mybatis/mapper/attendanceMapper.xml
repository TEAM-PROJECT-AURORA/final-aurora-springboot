<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.root34.aurora.attendance.dao.AttendanceMapper">

    <select id="getAttendance" resultType="hashMap">
        SELECT
            SUM(CASE WHEN TARDY = 'Y' THEN 1 ELSE 0 END) AS TARDY,
            SUM(CASE WHEN EARLY_OFF = 'Y' THEN 1 ELSE 0 END) AS EARLY_OFF,
            SUM(CASE WHEN TRUANCY = 'Y' THEN 1 ELSE 0 END) AS TRUANCY,
            SUM(CASE WHEN ABSENCE = 'Y' THEN 1 ELSE 0 END) AS ABSENCE
          FROM TBL_ATTENDANCE
         WHERE MEMBER_CODE = #{ memberCode }
    </select>

<!--    <insert id="insertWorkTime" parameterType="attendanceDTO">-->
<!--        INSERT INTO TBL_ATTENDANCE-->
<!--            (WORK_TIME, WORK_STATUS , MEMBER_CODE , TARDY)-->
<!--        VALUES-->
<!--            (#{ workTime, jdbcType=TIMESTAMP  }, '근무' , #{ memberCode } , 'N')-->
<!--        ON DUPLICATE KEY UPDATE TARDY = CASE WHEN TIME(VALUES(#{ workTime })) > '18:30:00' THEN 'Y' ELSE TARDY END;-->

<!--          -->
<!--    </insert>-->

    <insert id="insertWorkTime" parameterType="attendanceDTO">
        INSERT INTO TBL_ATTENDANCE (member_code, work_time, work_status, tardy)
        VALUES (#{memberCode}, #{workTime, jdbcType=TIMESTAMP}, '근무', IF(TIME(#{workTime, jdbcType=TIMESTAMP}) > '22:30:00', 'Y', 'N'))
--             ON DUPLICATE KEY UPDATE tardy = IF(TIME(VALUES(work_time)) > '20:30:00', 'Y', tardy);
    </insert>

<!--        <update id="insertWorkTime" parameterType="attendanceDTO">-->
<!--            UPDATE TBL_ATTENDANCE-->
<!--               SET-->
<!--                   WORK_TIME = #{ workTime, jdbcType=TIMESTAMP },-->
<!--                   WORK_STATUS = '근무'-->
<!--             WHERE MEMBER_CODE = #{ memberCode }-->
<!--               AND (SELECT MAX(ATT_CODE) FROM TBL_ATTENDANCE)-->
<!--               AND -->


<!--        </update>-->

<!--    <update id="insertOffTime" parameterType="attendanceDTO">-->
<!--        UPDATE TBL_ATTENDANCE-->
<!--           SET-->
<!--               OFF_TIME = #{ offTime, jdbcType=TIMESTAMP },-->
<!--               WORK_STATUS = '퇴근'-->
<!--         WHERE (MEMBER_CODE , ATT_CODE) IN (-->
<!--               SELECT MEMBER_CODE , MAX(ATT_CODE)-->
<!--               FROM TBL_ATTENDANCE-->
<!--               WHERE MEMBER_CODE = #{ memberCode }-->
<!--               GROUP BY MEMBER_CODE-->
<!--               )-->
<!--    </update>-->

    <update id="insertOffTime" parameterType="attendanceDTO">
        UPDATE TBL_ATTENDANCE
           SET
               OFF_TIME = #{ offTime, jdbcType=TIMESTAMP },
               WORK_STATUS = '퇴근'
         WHERE ATT_CODE = (
                    SELECT * FROM (
                              SELECT MAX(ATT_CODE)
                              FROM TBL_ATTENDANCE
                              WHERE MEMBER_CODE = #{ memberCode }
                          ) AS temp
          ) AND MEMBER_CODE = #{ memberCode }
    </update>

    <select id="selectTime" resultType="hashmap">
    <![CDATA[
        SELECT
               MEMBER_CODE,
               SUM(worked_minutes) AS total_worked_minutes,
               SUM(IF(worked_minutes > (9 * 60), worked_minutes - (9 * 60), 0)) AS extra_worked_minutes,
               SUM(IF(worked_minutes < (9 * 60), (9 * 60) - worked_minutes, 0)) AS remaining_minutes,
               SUM(IF(work_week = YEARWEEK(CURDATE(), 1), worked_minutes, 0)) AS worked_minutes_this_week,
               SUM(IF(work_month = MONTH(CURDATE()) AND work_year = YEAR(CURDATE()), worked_minutes, 0)) AS worked_minutes_this_month
          FROM (
                 SELECT
                        MEMBER_CODE,
                        DATE(OFF_TIME) AS work_date,
                        TIMESTAMPDIFF(MINUTE, WORK_TIME, OFF_TIME) AS worked_minutes,
                        MONTH(OFF_TIME) AS work_month,
                        YEAR(OFF_TIME) AS work_year,
                        YEARWEEK(OFF_TIME, 1) AS work_week
                   FROM TBL_ATTENDANCE
         WHERE (YEARWEEK(OFF_TIME, 1) = YEARWEEK(CURDATE(), 1)) OR (MONTH(OFF_TIME) = MONTH(CURDATE()) AND YEAR(OFF_TIME) = YEAR(CURDATE()))
            ) AS daily_worked_minutes
      GROUP BY MEMBER_CODE;
        ]]>
</select>

    <select id="selectMonthTime" resultType="hashmap">
        SELECT
                MEMBER_CODE,
                SUM(worked_minutes) AS total_worked_minutes,
                COUNT(DISTINCT work_date) AS total_work_days,
                (SUM(worked_minutes) / COUNT(DISTINCT work_date)) AS avg_worked_minutes
           FROM (
                    SELECT
                            MEMBER_CODE,
                            DATE(OFF_TIME) AS work_date,
                            TIMESTAMPDIFF(MINUTE, WORK_TIME, OFF_TIME) AS worked_minutes
                      FROM  TBL_ATTENDANCE
                     WHERE
                            MONTH(OFF_TIME) = MONTH(CURDATE())
                            AND YEAR(OFF_TIME) = YEAR(CURDATE())
                     )AS daily_worked_miutes
        GROUP BY MEMBER_CODE;


    </select>










</mapper>