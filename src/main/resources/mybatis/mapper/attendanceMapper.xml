<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.root34.aurora.attendance.dao.AttendanceMapper">

    <select id="getAttendance" resultType="hashMap">
        SELECT
            SUM(CASE WHEN TARDY = 'Y' THEN 1 ELSE 0 END) AS TARDY,
            SUM(CASE WHEN EARLY_OFF = 'Y' THEN 1 ELSE 0 END) AS EARLY_OFF,
            SUM(CASE WHEN TRUANCY = 'Y' THEN 1 ELSE 0 END) AS TRUANCY,
            SUM(CASE WHEN ABSENCE = 'Y' THEN 1 ELSE 0 END) AS ABSENCE
          FROM TBL_ATTENDANCE
         WHERE MEMBER_CODE = #{ memberCode }
         AND YEAR(ATT_REG_DATE) = YEAR(#{ selectedDate })
         AND MONTH(ATT_REG_DATE) = MONTH(#{ selectedDate })
    </select>

    <select id="getAttendanceList" resultType="hashMap">
       SELECT
            MEMBER_CODE,
            SUM(CASE WHEN TARDY = 'Y' THEN 1 ELSE 0 END) AS TARDY,
            SUM(CASE WHEN EARLY_OFF = 'Y' THEN 1 ELSE 0 END) AS EARLY_OFF,
            SUM(CASE WHEN TRUANCY = 'Y' THEN 1 ELSE 0 END) AS TRUANCY,
            SUM(CASE WHEN ABSENCE = 'Y' THEN 1 ELSE 0 END) AS ABSENCE
         FROM TBL_ATTENDANCE
        WHERE YEAR(ATT_REG_DATE) = YEAR(#{ selectedDate })
          AND MONTH(ATT_REG_DATE) = MONTH(#{ selectedDate })
     GROUP BY MEMBER_CODE

    </select>

    <select id="selectWorkStatus" resultType="hashmap">
        SELECT
               WORK_STATUS

          FROM TBL_ATTENDANCE
         WHERE MEMBER_CODE = #{ memberCode }
         ORDER BY ATT_CODE DESC
         LIMIT 1

    </select>

    <select id="selectTimeByDay" resultType="hashmap">
        SELECT
              WORK_TIME,
              OFF_TIME,
              ATT_REG_DATE

          FROM TBL_ATTENDANCE
         WHERE MEMBER_CODE = #{ memberCode }
           AND ATT_REG_DATE = #{ attRegDate }
    </select>

    <insert id="insertOrUpdateAttendance" parameterType="attendanceDTO">
        INSERT INTO TBL_ATTENDANCE (MEMBER_CODE,TARDY,EARLY_OFF,TRUANCY,ABSENCE,ATT_REG_DATE)
        VALUES (
                   #{ attendanceDTO.memberCode },
                   #{ attendanceDTO.tardy},
                   #{ attendanceDTO.earlyOff},
                   #{ attendanceDTO.truancy},
                   #{ attendanceDTO.absence},
                   #{selectedDate}
               )
            ON DUPLICATE KEY UPDATE
                                     TARDY = IF(ATT_REG_DATE = #{ selectedDate, jdbcType=DATE }, #{attendanceDTO.tardy},TARDY),
                                     EARLY_OFF = IF(ATT_REG_DATE = #{ selectedDate, jdbcType=DATE }, #{ attendanceDTO.earlyOff },EARLY_OFF),
                                     TRUANCY = IF(ATT_REG_DATE = #{ selectedDate, jdbcType=DATE }, #{ attendanceDTO.truancy },TRUANCY),
                                     ABSENCE = IF(ATT_REG_DATE = #{ selectedDate, jdbcType=DATE }, #{ attendanceDTO.absence },ABSENCE)

    </insert>


    <insert id="insertWorkTime" parameterType="attendanceDTO">
        INSERT INTO TBL_ATTENDANCE (MEMBER_CODE, WORK_TIME, WORK_STATUS, TARDY)
        VALUES (#{memberCode}, #{workTime, jdbcType=TIMESTAMP}, '근무', IF(TIME(#{workTime, jdbcType=TIMESTAMP}) > '09:30:00', 'Y', 'N'))
--             ON DUPLICATE KEY UPDATE tardy = IF(TIME(VALUES(work_time)) > '20:30:00', 'Y', tardy);
    </insert>






    <update id="insertOffTime" parameterType="attendanceDTO">
        UPDATE TBL_ATTENDANCE
           SET
               OFF_TIME = #{ offTime, jdbcType=TIMESTAMP },
               WORK_STATUS = '퇴근'
         WHERE ATT_CODE = (
                    SELECT * FROM (
                              SELECT MAX(ATT_CODE)
                              FROM TBL_ATTENDANCE
                              WHERE MEMBER_CODE = #{ memberCode }
                          ) AS temp
          ) AND MEMBER_CODE = #{ memberCode }
    </update>

    <select id="selectTime" resultType="hashmap">
    <![CDATA[
        SELECT
               MEMBER_CODE,
               SUM(worked_minutes) AS total_worked_minutes,
               SUM(IF(worked_minutes > (9 * 60), worked_minutes - (9 * 60), 0)) AS extra_worked_minutes,
               (45 * 60) - SUM(IF(work_week = YEARWEEK(#{ selectTime }, 1), worked_minutes, 0)) AS remaining_minutes, /*총근무시간을 45시간으로 설정*/
               SUM(IF(work_week = YEARWEEK(#{ selectTime }, 1), worked_minutes, 0)) AS worked_minutes_this_week,
               SUM(IF(work_month = MONTH(#{ selectTime }) AND work_year = YEAR(#{ selectTime }), worked_minutes, 0)) AS worked_minutes_this_month
          FROM (
                 SELECT
                        MEMBER_CODE,
                        DATE(OFF_TIME) AS work_date,
                        TIMESTAMPDIFF(MINUTE, WORK_TIME, OFF_TIME) AS worked_minutes,
                        MONTH(OFF_TIME) AS work_month,
                        YEAR(OFF_TIME) AS work_year,
                        YEARWEEK(OFF_TIME, 1) AS work_week
                   FROM TBL_ATTENDANCE
         WHERE (YEARWEEK(OFF_TIME, 1) = YEARWEEK(#{ selectTime }, 1)) OR (MONTH(OFF_TIME) = MONTH(#{ selectTime }) AND YEAR(OFF_TIME) = YEAR(#{ selectTime }))
           AND DAYOFWEEK(OFF_TIME) NOT IN (1, 7)
            ) AS daily_worked_minutes
        WHERE MEMBER_CODE = #{ memberCode }
      GROUP BY MEMBER_CODE;
        ]]>
</select>


    <select id="selectMonthTime" resultType="hashmap">
        SELECT
                MEMBER_CODE,
                SUM(worked_minutes) AS total_worked_minutes,
                COUNT(DISTINCT work_date) AS total_work_days,
                (SUM(worked_minutes) / COUNT(DISTINCT work_date)) AS avg_worked_minutes
           FROM (
                    SELECT
                            MEMBER_CODE,
                            DATE(OFF_TIME) AS work_date,
                            TIMESTAMPDIFF(MINUTE, WORK_TIME, OFF_TIME) AS worked_minutes
                      FROM  TBL_ATTENDANCE
                     WHERE
                            MONTH(OFF_TIME) = MONTH(CURDATE())
                            AND YEAR(OFF_TIME) = YEAR(CURDATE())
                     )AS daily_worked_miutes
           WHERE MEMBER_CODE = #{memberCode}

        GROUP BY MEMBER_CODE;


    </select>
    <select id="attendanceList" resultType="AttendanceDTO">
        SELECT
            A.MEMBER_CODE,
            A.MEMBER_NAME,
            A.PHONE,
            A.MEMBER_EMAIL,
            A.DEPT_CODE,
            B.DEPT_NAME,
            A.JOB_CODE,
            C.JOB_NAME,
            A.TASK_CODE,
            D.TASK_NAME,
            F.WORK_STATUS,
            F.WORK_TIME,
            F.OFF_TIME,
            F.ATT_REG_DATE,
            IFNULL(F.TARDY, 'N') AS TARDY,
            IFNULL(F.EARLY_OFF, 'N') AS EARLY_OFF,
            IFNULL(F.TRUANCY, 'N') AS TRUANCY,
            IFNULL(F.ABSENCE, 'N') AS ABSENCE


        FROM TBL_MEMBER A
                 JOIN TBL_DEPARTMENT B ON A.DEPT_CODE = B.DEPT_CODE
                 JOIN TBL_JOB C ON A.JOB_CODE = C.JOB_CODE
                 JOIN TBL_TASK D ON A.TASK_CODE = D.TASK_CODE
        LEFT OUTER JOIN TBL_ATTENDANCE F ON A.MEMBER_CODE = F.MEMBER_CODE
                                         AND F.ATT_REG_DATE = #{ selectedDate }

    </select>









</mapper>